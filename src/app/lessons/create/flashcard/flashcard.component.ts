import {
  Component,
  ElementRef,
  EventEmitter,
  Input,
  OnInit,
  Output,
} from '@angular/core'
import { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms'
import { map, Observable, startWith } from 'rxjs'

@Component({
  selector: 'add-flashcard',
  templateUrl: './flashcard.component.html',
  styleUrls: ['./flashcard.component.scss'],
})
export class FlashcardComponent implements OnInit {
  @Input() id: number = 0
  @Input() update: ElementRef<HTMLButtonElement>

  @Output() exportForm = new EventEmitter()

  public panelOpenState: boolean = true

  public langs: string[] = [
    'Afar (aa-AA)',
    'Abkhaz (ab-AB)',
    'Afrikaans (af-AF)',
    'Akan (ak-AK)',
    'Albanian (sq-SQ)',
    'Amharic (am-AM)',
    'Arabic (ar-AR)',
    'Aragonese (an-AN)',
    'Armenian (hy-HY)',
    'Assamese (as-AS)',
    'Avaric (av-AV)',
    'Avestan (ae-AE)',
    'Aymara (ay-AY)',
    'Azerbaijani (az-AZ)',
    'Bambara (bm-BM)',
    'Bashkir (ba-BA)',
    'Basque (eu-EU)',
    'Belarusian (be-BE)',
    'Bengali (bn-BN)',
    'Bihari (bh-BH)',
    'Bislama (bi-BI)',
    'Bosnian (bs-BS)',
    'Breton (br-BR)',
    'Bulgarian (bg-BG)',
    'Burmese (my-MY)',
    'Catalan (ca-CA)',
    'Valencian (ca-CA)',
    'Chamorro (ch-CH)',
    'Chechen (ce-CE)',
    'Chichewa (ny-NY)',
    'Chewa (ny-NY)',
    'Nyanja (ny-NY)',
    'Chinese (zh-ZH)',
    'Chuvash (cv-CV)',
    'Cornish (kw-KW)',
    'Corsican (co-CO)',
    'Cree (cr-CR)',
    'Croatian (hr-HR)',
    'Czech (cs-CS)',
    'Danish (da-DA)',
    'Divehi (dv-DV)',
    'Dhivehi (dv-DV)',
    'Maldivian (dv-DV)',
    'Dutch (nl-NL)',
    'English (en-EN)',
    'Esperanto (eo-EO)',
    'Estonian (et-ET)',
    'Ewe (ee-EE)',
    'Faroese (fo-FO)',
    'Fijian (fj-FJ)',
    'Finnish (fi-FI)',
    'French (fr-FR)',
    'Fula (ff-FF)',
    'Fulah (ff-FF)',
    'Pulaar (ff-FF)',
    'Pular (ff-FF)',
    'Galician (gl-GL)',
    'Georgian (ka-KA)',
    'German (de-DE)',
    'Greek (el-EL)',
    'Guaraní (gn-GN)',
    'Gujarati (gu-GU)',
    'Haitian (ht-HT)',
    'Haitian Creole (ht-HT)',
    'Hausa (ha-HA)',
    'Hebrew (he-HE)',
    'Herero (hz-HZ)',
    'Hindi (hi-HI)',
    'Hiri Motu (ho-HO)',
    'Hungarian (hu-HU)',
    'Interlingua (ia-IA)',
    'Indonesian (id-ID)',
    'Interlingue (ie-IE)',
    'Irish (ga-GA)',
    'Igbo (ig-IG)',
    'Inupiaq (ik-IK)',
    'Ido (io-IO)',
    'Icelandic (is-IS)',
    'Italian (it-IT)',
    'Inuktitut (iu-IU)',
    'Japanese (ja-JA)',
    'Javanese (jv-JV)',
    'Kalaallisut (kl-KL)',
    'Greenlandic (kl-KL)',
    'Kannada (kn-KN)',
    'Kanuri (kr-KR)',
    'Kashmiri (ks-KS)',
    'Kazakh (kk-KK)',
    'Khmer (km-KM)',
    'Kikuyu (ki-KI)',
    'Gikuyu (ki-KI)',
    'Kinyarwanda (rw-RW)',
    'Kirghiz (ky-KY)',
    'Kyrgyz (ky-KY)',
    'Komi (kv-KV)',
    'Kongo (kg-KG)',
    'Korean (ko-KO)',
    'Kurdish (ku-KU)',
    'Kwanyama (kj-KJ)',
    'Kuanyama (kj-KJ)',
    'Latin (la-LA)',
    'Luxembourgish (lb-LB)',
    'Letzeburgesch (lb-LB)',
    'Luganda (lg-LG)',
    'Limburgish (li-LI)',
    'Limburgan (li-LI)',
    'Limburger (li-LI)',
    'Lingala (ln-LN)',
    'Lao (lo-LO)',
    'Lithuanian (lt-LT)',
    'Luba-Katanga (lu-LU)',
    'Latvian (lv-LV)',
    'Manx (gv-GV)',
    'Macedonian (mk-MK)',
    'Malagasy (mg-MG)',
    'Malay (ms-MS)',
    'Malayalam (ml-ML)',
    'Maltese (mt-MT)',
    'Māori (mi-MI)',
    'Marathi (Marāṭhī) (mr-MR)',
    'Marshallese (mh-MH)',
    'Mongolian (mn-MN)',
    'Nauru (na-NA)',
    'Navajo (nv-NV)',
    'Navaho (nv-NV)',
    'Norwegian Bokmål (nb-NB)',
    'North Ndebele (nd-ND)',
    'Nepali (ne-NE)',
    'Ndonga (ng-NG)',
    'Norwegian Nynorsk (nn-NN)',
    'Norwegian (no-NO)',
    'Nuosu (ii-II)',
    'South Ndebele (nr-NR)',
    'Occitan (oc-OC)',
    'Ojibwe (oj-OJ)',
    'Ojibwa (oj-OJ)',
    'Old Church Slavonic (cu-CU)',
    'Church Slavic (cu-CU)',
    'Old Bulgarian (cu-CU)',
    'Oromo (om-OM)',
    'Oriya (or-OR)',
    'Ossetian (os-OS)',
    'Ossetic (os-OS)',
    'Panjabi (pa-PA)',
    'Punjabi (pa-PA)',
    'Pāli (pi-PI)',
    'Persian (fa-FA)',
    'Polish (pl-PL)',
    'Pashto (ps-PS)',
    'Pushto (ps-PS)',
    'Portuguese (pt-PT)',
    'Quechua (qu-QU)',
    'Romansh (rm-RM)',
    'Kirundi (rn-RN)',
    'Romanian (ro-RO)',
    'Moldavian (ro-RO)',
    'Moldovan (ro-RO)',
    'Russian (ru-RU)',
    'Sanskrit (Saṁskṛta) (sa-SA)',
    'Sardinian (sc-SC)',
    'Sindhi (sd-SD)',
    'Northern Sami (se-SE)',
    'Samoan (sm-SM)',
    'Sango (sg-SG)',
    'Serbian (sr-SR)',
    'Scottish Gaelic (gd-GD)',
    'Gaelic (gd-GD)',
    'Shona (sn-SN)',
    'Sinhala (si-SI)',
    'Sinhalese (si-SI)',
    'Slovak (sk-SK)',
    'Slovene (sl-SL)',
    'Somali (so-SO)',
    'Southern Sotho (st-ST)',
    'Spanish (es-ES)',
    'Castilian (es-ES)',
    'Sundanese (su-SU)',
    'Swahili (sw-SW)',
    'Swati (ss-SS)',
    'Swedish (sv-SV)',
    'Tamil (ta-TA)',
    'Telugu (te-TE)',
    'Tajik (tg-TG)',
    'Thai (th-TH)',
    'Tigrinya (ti-TI)',
    'Tibetan Standard (bo-BO)',
    'Tibetan (bo-BO)',
    'Central (bo-BO)',
    'Turkmen (tk-TK)',
    'Tagalog (tl-TL)',
    'Tswana (tn-TN)',
    'Tonga (Tonga Islands) (to-TO)',
    'Turkish (tr-TR)',
    'Tsonga (ts-TS)',
    'Tatar (tt-TT)',
    'Twi (tw-TW)',
    'Tahitian (ty-TY)',
    'Uighur, Uyghur (ug-UG)',
    'Ukrainian (uk-UK)',
    'Urdu (ur-UR)',
    'Uzbek (uz-UZ)',
    'Venda (ve-VE)',
    'Vietnamese (vi-VI)',
    'Volapük (vo-VO)',
    'Walloon (wa-WA)',
    'Welsh (cy-CY)',
    'Wolof (wo-WO)',
    'Western Frisian (fy-FY)',
    'Xhosa (xh-XH)',
    'Yiddish (yi-YI)',
    'Yoruba (yo-YO)',
    'Zhuang (za-ZA)',
    'Chuang (za-ZA)',
  ]

  filterLangs: Observable<string[]>

  langCtrl: FormControl = new FormControl('', [
    Validators.required,
    Validators.pattern(/[A-Z]{1}[a-z]{2,}\s\([a-z]{2}-[A-Z]{2}\)/),
  ])

  public flashcardFromGroup: FormGroup = this._formBuilder.group({
    word: new FormControl('', [Validators.required]),
    wordLang: this.langCtrl,
    tran: new FormControl('', [Validators.required]),
    tranLang: this.langCtrl,
  })

  constructor(private _formBuilder: FormBuilder) {}

  ngOnInit() {
    this.filterLangs = this.langCtrl.valueChanges.pipe(
      startWith(''),
      map((lang) => this._filter(lang || ''))
    )
  }

  private _filter(value: string): string[] {
    const filterValue = value.toLowerCase()
    return this.langs.filter((lang) => lang.toLowerCase().includes(filterValue))
  }

  public check(): void {
    console.log(this.flashcardFromGroup.valid)
    if (this.flashcardFromGroup.valid) {
      this.exportForm.emit({
        id: this.id,
        flashcard: this.flashcardFromGroup.value,
      })
    }
  }
}
